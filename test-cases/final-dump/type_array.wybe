pub type int_sequence {
    pub int_sequence(start: int, stride: int, end: int)

    pub def test `[|]`(?value: int, ?rest: int_sequence, current: int_sequence) {
        int_sequence(?s, ?st, ?en, current)

        if {
            st < 0 :: (s > en)
            | otherwise :: (s < en)
        }

        ?value = s
        ?rest = int_sequence(s + st, st, en)
    }
}

pub def xrange(start: int, stride: int, end: int): int_sequence =
    int_sequence(start, stride, end)

pub type int_array is address {}

pub def array(size: int, value: int, ?buffer: int_array) {
    # TODO: alloc does not take a runtime size. Never reaches "alloc"
    # codegen in Blocks.hs. Fails in AliasAnalysis
    foreign lpvm alloc(size * 8, ?buffer)

    for i in xrange(0, 1, size) {
        foreign lpvm mutate(buffer, ?buffer, i, 1, 8, 0, value)
    }
}

?a = array(10, 0)